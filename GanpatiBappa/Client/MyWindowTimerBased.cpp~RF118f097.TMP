#include<windows.h>
#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#include<process.h>
#include<math.h>


#define TIMERONE 200
#define TIMERTWO 400

// window procedure callback
LRESULT CALLBACK MyWndProcedure(HWND, UINT, WPARAM, LPARAM);
void CALLBACK TimerProcOne(HWND, UINT, UINT_PTR, DWORD);
void CALLBACK TimerProcTwo(HWND, UINT, UINT_PTR, DWORD);
void Draw(HWND);
void FreeResources();
void __cdecl ThreadProcOne(void*);

long ContourCount = 0;
long PointsCount = 0;

// To store that, how many points will be there in contours
int* PointsArray = NULL;
// Actual array of points where *DrawPoints is Contour index and **DrawPoints is array of actual points in that Contour
int** DrawPoints = NULL;

char buff[10];
FILE* fptr = NULL;

const TCHAR * fileName;
static int i,k, j = 0, m = 0;
HDC hdc;

TCHAR str[255];
RECT rc;

HBRUSH hBrush;
HPEN hPen;

static int syncVariable = 0;
static int r = 255, g = 128, b = 0;

// WinMain() -> __WinMainCRTStartup() -> main()
int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpszCmdLine, int iCmdShow)
{
	// take file name as input from commandline ...
	fileName = lpszCmdLine;

	WNDCLASSEX wndClass;
	MSG msg;
	TCHAR szAppName[] = TEXT("MyWindowApp");
	HWND hwnd;

	wndClass.cbSize = sizeof(wndClass);
	wndClass.cbClsExtra = 0;
	wndClass.cbWndExtra = 0;
	wndClass.lpfnWndProc = MyWndProcedure;
	wndClass.hIcon = LoadIcon(NULL, IDI_APPLICATION);
	wndClass.hbrBackground = (HBRUSH)GetStockObject(BLACK_BRUSH);
	wndClass.hCursor = LoadCursor(NULL, IDC_HAND);
	wndClass.hInstance = hInstance;
	wndClass.hIconSm = LoadIcon(NULL, IDI_APPLICATION);
	wndClass.lpszClassName = szAppName;
	wndClass.lpszMenuName = NULL;
	wndClass.style = CS_HREDRAW | CS_VREDRAW;

	RegisterClassEx(&wndClass);

	int xCalc = GetSystemMetrics(SM_CXSCREEN);
	int yCalc = GetSystemMetrics(SM_CYSCREEN);

	hwnd = CreateWindow(szAppName,
		TEXT("Ganpati Bappa Morya"),
		WS_OVERLAPPEDWINDOW,
		0,
		0,
		xCalc,
		yCalc,
		NULL,
		NULL,
		hInstance,
		NULL
		);

	ShowWindow(hwnd, SW_MAXIMIZE);
	UpdateWindow(hwnd);

	while (GetMessage(&msg, NULL, 0, 0)) {

		TranslateMessage(&msg);
		DispatchMessage(&msg);
	}
	return ((int)msg.wParam);

}

LRESULT CALLBACK MyWndProcedure(HWND hwnd, UINT iMsg, WPARAM wparam, LPARAM lparam)
{
	
	int ret;
	TCHAR str[255];
	static unsigned long hThreadOne = NULL;
	static unsigned long hThreadTwo = NULL;

	

	switch (iMsg)
	{
	case WM_CREATE:

		hThreadOne = _beginthread(ThreadProcOne, 0, (void*)hwnd);
		
		break;

	case WM_PAINT:

		GetClientRect(hwnd, &rc);

		SetTimer(hwnd, TIMERONE, USER_TIMER_MINIMUM, TimerProcOne);
		//SetTimer(hwnd, TIMERTWO, USER_TIMER_MINIMUM, TimerProcTwo);

		break;

	case WM_DESTROY:
		FreeResources();
		PostQuitMessage(0);

	default:
		break;
	}
	return(DefWindowProc(hwnd, iMsg, wparam, lparam));
}

void FreeResources() {

	fclose(fptr);
	free(PointsArray);
	for (int i = 0; i < ContourCount; i++) {
		free(DrawPoints[i]);
	}
	free(DrawPoints);

	fptr = NULL;
	DrawPoints = NULL;
	PointsArray = NULL;
}

void __cdecl ThreadProcOne(void *param) {

	if ((fptr = fopen(fileName, "r")) == NULL) {
		MessageBox((HWND)param, TEXT("Error opening file"), TEXT("Message"), MB_OK | MB_ICONWARNING);
		exit(0);
	}


	// To get the number of contours
	while (fgets(buff, 20, fptr) != NULL) {
		if (strcmp(buff, "****\n") == 0) {
			ContourCount++;
		}
	}

	// Allocation of array where the points are to be stored ...
	PointsArray = (int*)malloc(ContourCount * sizeof(int));
	// Allocation of array where the actual points will be stored ... at this stage in code
	// we just know the count of contours...
	DrawPoints = (int**)malloc(ContourCount * sizeof(int*));

	ContourCount = 0;
	PointsCount = 0;
	fseek(fptr, 0, SEEK_SET);

	// Here we will find the count of total points in each Contours,
	// based on this count we will be able to allocate the memory for actual points to be stored ... afterwards
	while (fgets(buff, 20, fptr) != NULL) {
		if (strcmp(buff, "****\n") == 0) {
			//printf("Contour no. %d   |   POINTS size. : %d\n", ContourCount, PointsCount);
			PointsArray[ContourCount] = PointsCount;
			PointsCount = 0;
			ContourCount++;
		}
		else
			PointsCount++;

	}

	// we have points count in each contour in the form of array 
	// so we will iterate over array and actually allocate the memory where points are to be stored ...
	for (int i = 0; i < ContourCount; i++) {
		DrawPoints[i] = (int*)malloc(PointsArray[i] * sizeof(int));
	}

	ContourCount = 0;
	PointsCount = 0;
	fseek(fptr, 0, SEEK_SET);

	// Now we will fill points in **DrawContours 
	while (fgets(buff, 20, fptr) != NULL) {

		if (strcmp(buff, "****\n") == 0) {
			PointsCount = 0;
			ContourCount++;
		}
		else {
			DrawPoints[ContourCount][PointsCount] = atoi(buff);
			PointsCount++;
		}


	}

	i = ContourCount - 1;
	syncVariable = 1;
}


void CALLBACK TimerProcOne(HWND hwnd, UINT msg, UINT_PTR eventMsg, DWORD ms) {

	KillTimer(hwnd, TIMERONE);

	if (syncVariable == 1) {

		syncVariable = 0;
		
		hdc = GetDC(hwnd);
		SetViewportOrgEx(hdc, rc.right / 4 + 50, 50, NULL);
		hBrush = CreateSolidBrush(RGB(247, 221, 196));
		SelectObject(hdc, hBrush);
		hPen = CreatePen(PS_INSIDEFRAME, 2, RGB(173, 139, 245));
		SelectObject(hdc, hPen);


		if (i > 0 && j != PointsArray[i] - 2){
			
			if (j < PointsArray[i] - 1) {

				Ellipse(hdc, DrawPoints[i][j] - 2, DrawPoints[i][j + 1] - 2, DrawPoints[i][j] + 2, DrawPoints[i][j + 1] + 2);
				j += 2;
			}
			else
				j = 0;

		}else
			i -= 2;

		ReleaseDC(hwnd, hdc);
		syncVariable = 1;
	}
	SetTimer(hwnd, TIMERONE, USER_TIMER_MINIMUM, TimerProcOne);
}


void CALLBACK TimerProcTwo(HWND hwnd, UINT msg, UINT_PTR eventMsg, DWORD ms) {

	KillTimer(hwnd, TIMERONE);

	if (syncVariable == 1) {

		syncVariable = 0;

		hdc = GetDC(hwnd);
		SetViewportOrgEx(hdc, rc.right / 4 + 50, 50, NULL);
		hBrush = CreateSolidBrush(RGB(247, 221, 196));
		SelectObject(hdc, hBrush);
		hPen = CreatePen(PS_INSIDEFRAME, 2, RGB(173, 139, 245));
		SelectObject(hdc, hPen);


		if (i > 0 && j != PointsArray[i] - 2) {

			if (j < PointsArray[i] - 1) {

				Ellipse(hdc, DrawPoints[i][j] - 2, DrawPoints[i][j + 1] - 2, DrawPoints[i][j] + 2, DrawPoints[i][j + 1] + 2);
				j += 2;
			}
			else
				j = 0;
		}
		else
			i -= 2;

		ReleaseDC(hwnd, hdc);
		syncVariable = 1;
	}
	SetTimer(hwnd, TIMERONE, USER_TIMER_MINIMUM, TimerProcOne);
}
